{
	// Place your react-madboiler workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Mad Boiler Component": {
		"prefix": "mdcomp",
		"body": [
			"import React from 'react'",
			"import PropTypes from 'prop-types'",
			"",
			"const propTypes = {}",
			"",
			"function ${1:Component}() {",
			"  return <div>Content</div>",
			"}",
			"",
			"${1:Component}.propTypes = propTypes",
			"",
			"export default ${1:Component}",
			""
		],
		"description": "Mad Boiler Component"
	},
	"Mad Boiler Style": {
		"prefix": "mdstyle",
		"body": [
			"import styled from 'styled-components'",
			"",
			"export const ${1:Wrapper} = styled.div`${2}`"
		],
		"description": "Mad Boiler Style"
	},
	"Mad boiler Component Unit": {
		"prefix": "mdcompunit",
		"body": [
			"import React from 'react'",
			"import { render } from '../../test.utils'",
			"",
			"import ${1:Component} from './${1:Component}'",
			"",
			"describe('${1:Component} component', () => {",
			"  ",
			"  const props = {}",
			"",
			"  it('should render correctly', () => {",
			"    const { container } = render(<${1:Component} {...props} />)",
			"    expect(container).toMatchSnapshot()",
			"  })",
			"})",
			""
		],
		"description": "Mad boiler Unit"
	},
	"Mad boiler Page": {
		"prefix": "mdpage",
		"body": [
			"import React from 'react'",
			"import Helmet from 'react-helmet'",
			"",
			"import ${1} from '../components/${1}'",
			"",
			"export default function ${1}Page() {",
			"  return (",
			"    <>",
			"      <Helmet>",
			"        <title>${1} page</title>",
			"      </Helmet>",
			"      <${1} />",
			"    </>",
			"  )",
			"}",
			""
		],
		"description": "Mad boiler Page"
	},
	"Mad boiler Hook": {
		"prefix": "mdhook",
		"body": [
			"const use${1} =({}) => {",
			"  return {}",
			"}",
			"",
			"export default use${1}",
			""
		],
		"description": "Mad boiler Hook"
	},
	"Mad boiler Reducer": {
		"prefix": "mdreducer",
		"body": [
			"import { createReducer } from '../store.utils'",
			"import {} from './actions'",
			"",
			"const initialState = {}",
			"",
			"export const ${1}Reducer = createReducer(initialState, {})"
		],
		"description": "Mad boiler Reducer"
	},
	"Mad boiler Reducer Unit": {
		"prefix": "mdreducerunit",
		"body": [
			"import { ${1}Reducer as reducer, initialState } from './reducer'",
			"",
			"describe('${1} reducer', () => {",
			"  it('should handle undefined action and return current state', () => {",
			"    expect(reducer(initialState, { type: undefined })).toEqual(initialState)",
			"  })",
			"})"
		],
		"description": "Mad boiler Reducer Unit"
	},
	"Mad boiler Action Type": {
		"prefix": "mdactiontype",
		"body": [
			"export const ${1} = createActionTypes('${1}')"
		],
		"description": "Mad boiler Action Type"
	},
	"Mad boiler Action": {
		"prefix": "mdaction",
		"body": [
			"export const ${1} = createAction(${2}, payload => {",
			"  return payload",
			"})"
		],
		"description": "Mad boiler Action Type"
	},
	"Mad boiler Async Action": {
		"prefix": "mdasyncaction",
		"body": [
			"export const ${1} = createAsyncAction(${2}, async ({ success, failure }) => {",
			"  try {",
			"    success()",
			"  } catch (err) {",
			"    failure(err)",
			"  }",
			"})"
		],
		"description": "Mad boiler Action Type"
	},
	"Mad boiler Selector": {
		"prefix": "mdselector",
		"body": [
			"export const get${1} = createSelector(",
			"  state => state.${2},",
			")"
		],
		"description": "Mad boiler Selector"
	}
}